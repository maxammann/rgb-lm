package lm;
import com.ochafik.lang.jnaerator.runtime.CharByReference;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.WString;
/**
 * JNA Wrapper for library <b>lm</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LmLibrary extends Library {
    public static final String JNA_LIBRARY_NAME = "lm";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LmLibrary.JNA_LIBRARY_NAME);
    public static final LmLibrary INSTANCE = (LmLibrary)Native.loadLibrary(LmLibrary.JNA_LIBRARY_NAME, LmLibrary.class);
    public static final int MAX_BITPLANES = (int)11;
    /**
     * Original signature : <code>int lm_gpio_init()</code><br>
     * <i>native declaration : line 2</i>
     */
    int lm_gpio_init();
    /**
     * Original signature : <code>uint32_t lm_gpio_init_output(uint32_t)</code><br>
     * <i>native declaration : line 4</i>
     */
    int lm_gpio_init_output(int outputs);
    /**
     * Original signature : <code>void lm_gpio_set_bits(uint32_t)</code><br>
     * <i>native declaration : line 6</i>
     */
    void lm_gpio_set_bits(int value);
    /**
     * Clear the bits that are '1' in the output. Leave the rest untouched.<br>
     * Original signature : <code>void lm_gpio_clear_bits(uint32_t)</code><br>
     * <i>native declaration : line 9</i>
     */
    void lm_gpio_clear_bits(int value);
    /**
     * Write all the bits of "value" mentioned in "mask". Leave the rest untouched.<br>
     * Original signature : <code>void lm_gpio_set_masked_bits(uint32_t, uint32_t)</code><br>
     * <i>native declaration : line 12</i>
     */
    void lm_gpio_set_masked_bits(int value, int mask);
    /**
     * Original signature : <code>uint32_t lm_io_bits_new()</code><br>
     * <i>native declaration : line 21</i>
     */
    int lm_io_bits_new();
    /**
     * Original signature : <code>io_bits* lm_io_bits_value_at(io_bits*, int, int, int, int)</code><br>
     * <i>native declaration : line 23</i>
     */
    LmLibrary.io_bits lm_io_bits_value_at(LmLibrary.io_bits bitplane, int columns, int double_row, int column, int bit);
    /**
     * Original signature : <code>lmLedMatrix* lm_matrix_new(uint16_t, uint16_t, uint8_t)</code><br>
     * <i>native declaration : line 27</i>
     */
    LmLibrary.lmLedMatrix lm_matrix_new(short columns, short rows, byte pwm_bits);
    /**
     * Original signature : <code>void lm_matrix_free(lmLedMatrix*)</code><br>
     * <i>native declaration : line 29</i>
     */
    void lm_matrix_free(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>uint16_t lm_matrix_columns(lmLedMatrix*)</code><br>
     * <i>native declaration : line 31</i>
     */
    short lm_matrix_columns(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>uint16_t lm_matrix_rows(lmLedMatrix*)</code><br>
     * <i>native declaration : line 33</i>
     */
    short lm_matrix_rows(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>uint16_t lm_matrix_pwm_bits(lmLedMatrix*)</code><br>
     * <i>native declaration : line 35</i>
     */
    short lm_matrix_pwm_bits(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>void lm_matrix_lock(lmLedMatrix*)</code><br>
     * <i>native declaration : line 37</i>
     */
    void lm_matrix_lock(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>void lm_matrix_unlock(lmLedMatrix*)</code><br>
     * <i>native declaration : line 39</i>
     */
    void lm_matrix_unlock(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>io_bits* lm_matrix_bit_plane(lmLedMatrix*)</code><br>
     * <i>native declaration : line 43</i>
     */
    LmLibrary.io_bits lm_matrix_bit_plane(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>void lm_matrix_fill(lmLedMatrix*, uint8_t, uint8_t, uint8_t)</code><br>
     * <i>native declaration : line 45</i>
     */
    void lm_matrix_fill(LmLibrary.lmLedMatrix matrix, byte r, byte g, byte b);
    /**
     * Original signature : <code>void lm_matrix_set_pixel(lmLedMatrix*, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t)</code><br>
     * <i>native declaration : line 48</i>
     */
    void lm_matrix_set_pixel(LmLibrary.lmLedMatrix matrix, short x, short y, byte red, byte green, byte blue);
    /**
     * Original signature : <code>void lm_matrix_print_string(lmLedMatrix*, const char*, char*, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t)</code><br>
     * <i>native declaration : line 52</i><br>
     * @deprecated use the safer methods {@link #lm_matrix_print_string(lm.LmLibrary.lmLedMatrix, java.lang.String, java.lang.String, short, short, byte, byte, byte)} and {@link #lm_matrix_print_string(lm.LmLibrary.lmLedMatrix, com.sun.jna.Pointer, com.sun.jna.Pointer, short, short, byte, byte, byte)} instead
     */
    @Deprecated
    void lm_matrix_print_string(LmLibrary.lmLedMatrix matrix, Pointer text, Pointer font, short x, short y, byte red, byte green, byte blue);
    /**
     * Original signature : <code>void lm_matrix_print_string(lmLedMatrix*, const char*, char*, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t)</code><br>
     * <i>native declaration : line 52</i>
     */
    void lm_matrix_print_string(LmLibrary.lmLedMatrix matrix, String text, String font, short x, short y, byte red, byte green, byte blue);
    /**
     * Original signature : <code>void lm_matrix_print_wstring(lmLedMatrix*, const wchar_t*, char*, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t)</code><br>
     * <i>native declaration : line 56</i><br>
     * @deprecated use the safer methods {@link #lm_matrix_print_wstring(lm.LmLibrary.lmLedMatrix, com.sun.jna.WString, java.lang.String, short, short, byte, byte, byte)} and {@link #lm_matrix_print_wstring(lm.LmLibrary.lmLedMatrix, com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.Pointer, short, short, byte, byte, byte)} instead
     */
    @Deprecated
    void lm_matrix_print_wstring(LmLibrary.lmLedMatrix matrix, CharByReference text, Pointer font, short x, short y, byte red, byte green, byte blue);
    /**
     * Original signature : <code>void lm_matrix_print_wstring(lmLedMatrix*, const wchar_t*, char*, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t)</code><br>
     * <i>native declaration : line 56</i>
     */
    void lm_matrix_print_wstring(LmLibrary.lmLedMatrix matrix, WString text, String font, short x, short y, byte red, byte green, byte blue);
    /**
     * Original signature : <code>void lm_matrix_clear(lmLedMatrix*)</code><br>
     * <i>native declaration : line 61</i>
     */
    void lm_matrix_clear(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>lmThread* lm_thread_new(lmLedMatrix*)</code><br>
     * <i>native declaration : line 66</i>
     */
    LmLibrary.lmThread lm_thread_new(LmLibrary.lmLedMatrix matrix);
    /**
     * Original signature : <code>void lm_thread_free(lmThread*)</code><br>
     * <i>native declaration : line 68</i>
     */
    void lm_thread_free(LmLibrary.lmThread thread);
    /**
     * Original signature : <code>void lm_thread_start(lmThread*)</code><br>
     * <i>native declaration : line 70</i>
     */
    void lm_thread_start(LmLibrary.lmThread thread);
    /**
     * Original signature : <code>void lm_thread_wait(lmThread*)</code><br>
     * <i>native declaration : line 72</i>
     */
    void lm_thread_wait(LmLibrary.lmThread thread);
    public static class lmLedMatrix extends PointerType {
        public lmLedMatrix(Pointer address) {
            super(address);
        }
        public lmLedMatrix() {
            super();
        }
    };
    public static class lmThread extends PointerType {
        public lmThread(Pointer address) {
            super(address);
        }
        public lmThread() {
            super();
        }
    };
    public static class io_bits extends PointerType {
        public io_bits(Pointer address) {
            super(address);
        }
        public io_bits() {
            super();
        }
    };
}
